# Generated by cynkrathis::use_cmakelists(), do not edit by hand
#
# Call:
# quote(cynkrathis::use_cmakelists())

add_library(RSQLite
  DbColumn.cpp
  DbColumn.h
  DbColumnDataSource.cpp
  DbColumnDataSource.h
  DbColumnDataSourceFactory.cpp
  DbColumnDataSourceFactory.h
  DbColumnDataType.h
  DbColumnStorage.cpp
  DbColumnStorage.h
  DbConnection.cpp
  DbConnection.h
  DbDataFrame.cpp
  DbDataFrame.h
  DbResult.cpp
  DbResult.h
  DbResultImpl.h
  DbResultImplDecl.h
  RSQLite.h
  RSQLite_types.h
  RcppExports.cpp
  SqliteColumnDataSource.cpp
  SqliteColumnDataSource.h
  SqliteColumnDataSourceFactory.cpp
  SqliteColumnDataSourceFactory.h
  SqliteDataFrame.cpp
  SqliteDataFrame.h
  SqliteResult.cpp
  SqliteResult.h
  SqliteResultImpl.cpp
  SqliteResultImpl.h
  affinity.c
  affinity.h
  connection.cpp
  ext-csv.c
  ext-math.c
  ext-regexp.c
  ext-series.c
  extensions.cpp
  import-file.c
  integer64.h
  pch.h
  result.cpp
  rsqlite.cpp
  sqlite3-cpp.h
)

execute_process(COMMAND bash "-c" "Rscript -e 'cat(R.home(\"include\"))'" OUTPUT_VARIABLE R_INCLUDE)
execute_process(COMMAND bash "-c" "Rscript -e 'x <- read.dcf(\"../DESCRIPTION\"); if (\"LinkingTo\" %in% colnames(x)) { pkgs <- strsplit(x[, \"LinkingTo\"], \"(?: +[(][^)]+[)]) *,[\\n\\t ]*\")[[1]]; paths <- file.path(.libPaths()[[1]], pkgs, \"include\"); writeLines(paste0(paths, collapse = \";\")) }'" OUTPUT_VARIABLE R_LIBRARIES_INCLUDES)

target_include_directories(RSQLite PUBLIC
  ${R_INCLUDE}
  ${R_LIBRARIES_INCLUDES}
  # Included by default
  "."
  "vendor"
)

include(./custom.cmake OPTIONAL)
